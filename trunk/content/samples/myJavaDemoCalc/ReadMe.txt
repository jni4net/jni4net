This sample demonstrates how to wrap your own library with proxygen without too much effort spent configuring it.
Look at the batch files and the run it.

1) run generateProxies.cmd, it will do following
- generateProxies will copy all dependencies from jni4net lib to work directory
- generateProxies will run proxygen tool to wrap 'your' myJavaDemoCalc.jar
-- proxygen: generate C# proxies
-- proxygen: generate java proxies
-- proxygen: generate build.cmd
-- proxygen: generate myJavaDemoCalc.proxygen.xml
- generateProxies will run work\build.cmd to compile all stuff generated by proxygen. 
-- build.cmd : run javac to compile java classes
-- build.cmd : run jar to package classes into .JAR file
-- build.cmd : run csc to compile C# classes and produce .DLL
-- build.cmd : In real life you should use Ant or something smarter.
- generateProxies will run csc to compile example of usage MyCalcUsageInDotnet.cs

2) look at MyCalcUsageInDotnet.cs to see how to use the new wrapper

3) you run run.cmd to execute sample

Your output here is:
work/*.dll
work/*.jar
work/*.exe
work/*.txt

This is what you deploy.