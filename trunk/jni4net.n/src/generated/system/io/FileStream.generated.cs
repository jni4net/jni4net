//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.IO {
    
    
    #region Component Designer generated code 
    public unsafe partial class FileStream_ {
        
        public new static global::java.lang.Class _class {
            get {
                return global::System.IO.@__FileStream.staticClass;
            }
        }
    }
    #endregion
    
    #region Component Designer generated code 
    [global::net.sf.jni4net.attributes.JavaProxyAttribute()]
    [global::net.sf.jni4net.attributes.ClrWrapperAttribute(typeof(global::System.IO.FileStream))]
    internal unsafe partial class @__FileStream : global::java.lang.Object {
        
        internal static global::java.lang.Class staticClass;
        
        protected @__FileStream(global::net.sf.jni4net.jni.JNIEnv env) : 
                base(env) {
        }
        
        private static void InitJNI(global::net.sf.jni4net.jni.JNIEnv env, java.lang.Class staticClass) {
            global::System.IO.@__FileStream.staticClass = staticClass;
        }
        
        private static global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> @__Init(global::net.sf.jni4net.jni.JNIEnv env, global::java.lang.Class clazz) {
            global::System.Type type = typeof(__FileStream);
            global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> methods = new global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod>();
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "isAsync", "IsAsync0", "()Z"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "getName", "Name1", "()Ljava/lang/String;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "GetAccessControl", "GetAccessControl2", "()Ljava/lang/Object;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "SetAccessControl", "SetAccessControl3", "(Ljava/lang/Object;)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "getHandle", "Handle4", "()Lsystem/ValueType;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "getSafeFileHandle", "SafeFileHandle5", "()Lsystem/IDisposable;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "Lock", "Lock6", "(JJ)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "Unlock", "Unlock7", "(JJ)V"));
            return methods;
        }
        
        private static bool IsAsync0(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()Z
            // ()Z
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            return real.IsAsync;
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
            return default(bool);
        }
        
        private static global::java.lang.Object.JavaPtr* Name1(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()Ljava/lang/String;
            // ()LSystem/String;
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            return global::net.sf.jni4net.utils.ClrProxiesMap.ConvertString(@__env, real.Name);
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
            return default(global::java.lang.Object.JavaPtr*);
        }
        
        private static global::java.lang.Object.JavaPtr* GetAccessControl2(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()Ljava/lang/Object;
            // ()LSystem/Security/AccessControl/FileSecurity;
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            return global::net.sf.jni4net.utils.ClrProxiesMap.WrapClr(@__env, real.GetAccessControl());
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
            return default(global::java.lang.Object.JavaPtr*);
        }
        
        private static void SetAccessControl3(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj, global::java.lang.Object.JavaPtr* fileSecurity) {
            // (Ljava/lang/Object;)V
            // (LSystem/Security/AccessControl/FileSecurity;)V
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            real.SetAccessControl(global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.Security.AccessControl.FileSecurity>(__env, fileSecurity));
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
        }
        
        private static global::System.IntPtr Handle4(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()Lsystem/ValueType;
            // ()LSystem/IntPtr;
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            return ((global::System.IntPtr)(real.Handle));
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
            return default(global::System.IntPtr);
        }
        
        private static global::java.lang.Object.JavaPtr* SafeFileHandle5(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()Lsystem/IDisposable;
            // ()LMicrosoft/Win32/SafeHandles/SafeFileHandle;
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            return global::net.sf.jni4net.utils.ClrProxiesMap.WrapClr(@__env, real.SafeFileHandle);
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
            return default(global::java.lang.Object.JavaPtr*);
        }
        
        private static void Lock6(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj, long position, long length) {
            // (JJ)V
            // (JJ)V
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            real.Lock(position, length);
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
        }
        
        private static void Unlock7(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj, long position, long length) {
            // (JJ)V
            // (JJ)V
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::System.IO.FileStream real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.IO.FileStream>(__env, @__obj);
            real.Unlock(position, length);
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
        }
        
        internal sealed class ContructionHelper : global::net.sf.jni4net.utils.IConstructionHelper {
            
            public global::net.sf.jni4net.jni.IJavaProxy CreateProxy(global::net.sf.jni4net.jni.JNIEnv env) {
                return new global::System.IO.@__FileStream(env);
            }
        }
    }
    #endregion
}
