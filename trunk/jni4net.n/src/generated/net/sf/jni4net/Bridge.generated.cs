//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace net.sf.jni4net {
    
    
    #region Component Designer generated code 
    public partial class Bridge_ {
        
        public new static global::java.lang.Class _class {
            get {
                return global::net.sf.jni4net.@__Bridge.staticClass;
            }
        }
    }
    #endregion
    
    #region Component Designer generated code 
    [global::net.sf.jni4net.attributes.JavaProxyAttribute(typeof(global::net.sf.jni4net.Bridge))]
    [global::net.sf.jni4net.attributes.ClrWrapperAttribute(typeof(global::net.sf.jni4net.Bridge))]
    internal sealed partial class @__Bridge : global::java.lang.Object {
        
        internal static global::java.lang.Class staticClass;
        
        protected @__Bridge(global::net.sf.jni4net.jni.JNIEnv @__env) : 
                base(@__env) {
        }
        
        private static void InitJNI(global::net.sf.jni4net.jni.JNIEnv @__env, java.lang.Class @__class) {
            global::net.sf.jni4net.@__Bridge.staticClass = @__class;
        }
        
        private static global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> @__Init(global::net.sf.jni4net.jni.JNIEnv @__env, global::java.lang.Class @__class) {
            global::System.Type @__type = typeof(__Bridge);
            global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> methods = new global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod>();
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "IsCLRInstance", "IsCLRInstance0", "(Lsystem/Object;)Z"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "IsJVMInstance", "IsJVMInstance1", "(Lsystem/Object;)Z"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "WrapCLR", "WrapCLR2", "(Lsystem/Object;)Lnet/sf/jni4net/inj/IClrProxy;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "WrapJVM", "WrapJVM3", "(Ljava/lang/Object;Ljava/lang/Class;)Lsystem/Object;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "UnwrapJVM", "UnwrapJVM4", "(Lsystem/Object;Ljava/lang/Class;)Ljava/lang/Object;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "UnwrapJVM", "UnwrapJVM5", "(Lsystem/Exception;Ljava/lang/Class;)Ljava/lang/Object;"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "getVerbose", "Verbose6", "()Z"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "setVerbose", "Verbose7", "(Z)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "getDebug", "Debug8", "()Z"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "setDebug", "Debug9", "(Z)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "getBindNative", "BindNative10", "()Z"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "setBindNative", "BindNative11", "(Z)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "LoadAndRegisterAssembly", "LoadAndRegisterAssembly12", "(Ljava/lang/String;)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "RegisterAssembly", "RegisterAssembly13", "(Lsystem/reflection/Assembly;)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(@__type, "disposeClrHandle", "disposeClrHandle14", "(I)V"));
            return methods;
        }
        
        private static bool IsCLRInstance0(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr obj) {
            // (Lsystem/Object;)Z
            // (LSystem/Object;)Z
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return ((bool)(global::net.sf.jni4net.Bridge.IsCLRInstance(global::net.sf.jni4net.utils.Convertor.FullJ2C<object>(@__env, obj))));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(bool);
        }
        
        private static bool IsJVMInstance1(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr obj) {
            // (Lsystem/Object;)Z
            // (LSystem/Object;)Z
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return ((bool)(global::net.sf.jni4net.Bridge.IsJVMInstance(global::net.sf.jni4net.utils.Convertor.FullJ2C<object>(@__env, obj))));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(bool);
        }
        
        private static global::System.IntPtr WrapCLR2(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr obj) {
            // (Lsystem/Object;)Lnet/sf/jni4net/inj/IClrProxy;
            // (LSystem/Object;)LSystem/Object;
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return global::net.sf.jni4net.utils.Convertor.FullC2J<object>(@__env, global::net.sf.jni4net.Bridge.WrapCLR(global::net.sf.jni4net.utils.Convertor.FullJ2C<object>(@__env, obj)));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(global::System.IntPtr);
        }
        
        private static global::System.IntPtr WrapJVM3(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr obj, global::System.IntPtr interfaceClass) {
            // (Ljava/lang/Object;Ljava/lang/Class;)Lsystem/Object;
            // (Lnet/sf/jni4net/jni/IJavaProxy;Ljava/lang/Class;)LSystem/Object;
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return global::net.sf.jni4net.utils.Convertor.FullC2J<object>(@__env, global::net.sf.jni4net.Bridge.WrapJVM(global::net.sf.jni4net.utils.Convertor.FullJ2C<global::net.sf.jni4net.jni.IJavaProxy>(@__env, obj), global::net.sf.jni4net.utils.Convertor.StrongJ2CpClass(@__env, interfaceClass)));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(global::System.IntPtr);
        }
        
        private static global::System.IntPtr UnwrapJVM4(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr obj, global::System.IntPtr interfaceClass) {
            // (Lsystem/Object;Ljava/lang/Class;)Ljava/lang/Object;
            // (LSystem/Object;Ljava/lang/Class;)Lnet/sf/jni4net/jni/IJavaProxy;
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return global::net.sf.jni4net.utils.Convertor.FullC2J<global::net.sf.jni4net.jni.IJavaProxy>(@__env, global::net.sf.jni4net.Bridge.UnwrapJVM(global::net.sf.jni4net.utils.Convertor.FullJ2C<object>(@__env, obj), global::net.sf.jni4net.utils.Convertor.StrongJ2CpClass(@__env, interfaceClass)));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(global::System.IntPtr);
        }
        
        private static global::System.IntPtr UnwrapJVM5(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr obj, global::System.IntPtr interfaceClass) {
            // (Lsystem/Exception;Ljava/lang/Class;)Ljava/lang/Object;
            // (LSystem/Exception;Ljava/lang/Class;)Lnet/sf/jni4net/jni/IJavaProxy;
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return global::net.sf.jni4net.utils.Convertor.FullC2J<global::net.sf.jni4net.jni.IJavaProxy>(@__env, global::net.sf.jni4net.Bridge.UnwrapJVM(global::net.sf.jni4net.utils.Convertor.FullJ2C<global::System.Exception>(@__env, obj), global::net.sf.jni4net.utils.Convertor.StrongJ2CpClass(@__env, interfaceClass)));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(global::System.IntPtr);
        }
        
        private static bool Verbose6(global::System.IntPtr @__envp, global::System.IntPtr @__class) {
            // ()Z
            // ()Z
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return ((bool)(global::net.sf.jni4net.Bridge.Verbose));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(bool);
        }
        
        private static void Verbose7(global::System.IntPtr @__envp, global::System.IntPtr @__class, bool value) {
            // (Z)V
            // (Z)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::net.sf.jni4net.Bridge.Verbose = value;
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
        }
        
        private static bool Debug8(global::System.IntPtr @__envp, global::System.IntPtr @__class) {
            // ()Z
            // ()Z
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return ((bool)(global::net.sf.jni4net.Bridge.Debug));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(bool);
        }
        
        private static void Debug9(global::System.IntPtr @__envp, global::System.IntPtr @__class, bool value) {
            // (Z)V
            // (Z)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::net.sf.jni4net.Bridge.Debug = value;
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
        }
        
        private static bool BindNative10(global::System.IntPtr @__envp, global::System.IntPtr @__class) {
            // ()Z
            // ()Z
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            return ((bool)(global::net.sf.jni4net.Bridge.BindNative));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
            return default(bool);
        }
        
        private static void BindNative11(global::System.IntPtr @__envp, global::System.IntPtr @__class, bool value) {
            // (Z)V
            // (Z)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::net.sf.jni4net.Bridge.BindNative = value;
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
        }
        
        private static void LoadAndRegisterAssembly12(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr assemblyPath) {
            // (Ljava/lang/String;)V
            // (LSystem/String;)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::net.sf.jni4net.Bridge.LoadAndRegisterAssembly(global::net.sf.jni4net.utils.Convertor.StrongJp2CString(@__env, assemblyPath));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
        }
        
        private static void RegisterAssembly13(global::System.IntPtr @__envp, global::System.IntPtr @__class, global::System.IntPtr assembly) {
            // (Lsystem/reflection/Assembly;)V
            // (LSystem/Reflection/Assembly;)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::net.sf.jni4net.Bridge.RegisterAssembly(global::net.sf.jni4net.utils.Convertor.StrongJp2C<global::System.Reflection.Assembly>(@__env, assembly));
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
        }
        
        private static void disposeClrHandle14(global::System.IntPtr @__envp, global::System.IntPtr @__class, int clrHandle) {
            // (I)V
            // (I)V
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.Wrap(@__envp);
            try {
            global::net.sf.jni4net.Bridge.disposeClrHandle(clrHandle);
            }catch (global::System.Exception ex){@__env.ThrowExisting(ex);}
        }
        
        internal sealed class ContructionHelper : global::net.sf.jni4net.utils.IConstructionHelper {
            
            public global::net.sf.jni4net.jni.IJavaProxy CreateProxy(global::net.sf.jni4net.jni.JNIEnv @__env) {
                return new global::net.sf.jni4net.@__Bridge(@__env);
            }
        }
    }
    #endregion
}
