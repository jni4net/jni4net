This sample demonstrates how to wrap your own library with proxygen without too much effort spent configuring it.
Look at the batch files and the run it.

1) run generateProxies.cmd, it will do following
- generateProxies will copy all dependencies from jni4net lib to bin\ directory
- generateProxies will run proxygen tool to wrap 'your' MyCSharpDemoCalc.dll
-- proxygen: create MyCSharpDemoCalc folder
-- proxygen: generate java proxies into MyCSharpDemoCalc\j4n
-- proxygen: generate C# proxies into MyCSharpDemoCalc\j4n
-- proxygen: generate MyCSharpDemoCalc\MyCSharpDemoCalc.cmd
-- proxygen: create MyCSharpDemoCalc\MyCSharpDemoCalc-j4n.xml config file
- generateProxies will run MyCSharpDemoCalc\MyCSharpDemoCalc.cmd to compile all stuff generated by proxygen. 
-- build.cmd : run javac to compile java classes
-- build.cmd : run jar to package classes into .JAR file
-- build.cmd : run csc to compile C# classes and produce .DLL
-- build.cmd : In real life you could use Ant or something smarter.
-- copy new MyCSharpDemoCalc-j4n.dll and MyCSharpDemoCalc-j4n.jar to bin\

2) look at MyCalcUsageInJava.java to see how to use the new wrapper.
3) run compile.cmd to compile the usage of new wrapper. 
4) Look at .jars in classPath.

5) you run run.cmd to execute sample

Your output here is:
bin/*.dll
bin/*.jar
bin/*.class
bin/*.txt

This is what you deploy.